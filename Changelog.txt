11-Apr-2016 ======== Version 1.0.2 beta 1 Release ========

11-Apr-2016 Fixes #209. Xcode generation now supports identifying .tbd files, new in Xcode 7, which are text based dylib definition files. The LinkPrebuiltLibrary exercises this when targeting Xcode7.

11-Apr-2016 Fixes #218. Removed unused code from Bam.Core.TimingProfileUtilities that had been identified by Coverity scan.

11-Apr-2016 Fixes #217. Fetching the rank of a ModuleCollection from the Bam.Core.DependencyGraph used a comparison for a default System.Collections.Generic.Dictionary<int, ModuleCollection> which Coverity scan identified as logically dead code (equivalent to null, even though that doesn't compile), suggesting all ModuleCollections should have a valid rank index (which isn't true). Regardless, the code has been tidied up to eliminate ambiguity.

11-Apr-2016 Fixes #216. In Bam.Core.Settings.InitializeAllInterfaces, refactor so that cached interfaces for each module type are both stored and extracted under a synchronization lock. Coverity scan previously identified that a potential data race existed, as the indexer was used outside of the lock.

11-Apr-2016 Fixes #215. In Bam.Core.Module.CloneWithPrivatePatches, check the return value from Module.Create before dereferencing it. This is an unlikely scenario, as the source module of the same type already exists, but was identified in static analysis from Coverity scan.

11-Apr-2016 Fixes #214. Simplified checks for a valid timing profile, displayed with --stats. Fixes an ordering issue found by a Coverity scan.

10-Apr-2016 Fixes #213. Removed Bam.Core.XmlResolver class. It was only used to resolve the relative pathname to the schema, which can be specified on the XmlReaderSettings in a much simpler way. Also resolves a resource leak identified by a Coverity scan.

10-Apr-2016 Fixes #212. Wrapped System.Threading.CancellationTokenSource in a using block to fix the resource leak identified by a Coverity scan.

10-Apr-2016 Fixes #210. Add support in make_release.py to generate a build using the Coverity static analysis tools.

10-Apr-2016 Fixes #211. Cleaned up make_release.py script to accept a git tag, and optionally a version number.

09-Apr-2016 Fixes #208. Address performance issues identified by SlimTune in generating file filters for VisualStudio projects. A large project tested (a solution with 99 projects) showed a 50% reduction in time spent executing the dependency graph afer this change.

08-Apr-2016 Fixes #207. Added predication on the settings type in VisualCCommon.Compiler's PublicPatch for C.ICommonCompilerSettings. This would have resulted in a Null reference exception if applied to any module Settings class that doesn't implement that interface. This could happen for procedurally generated source files with custom Settings.

07-Apr-2016 Fixes #205. Mingw now also supports the C.Cxx.ELanguageStandard.GnuCxx98 mode.

06-Apr-2016 Fixes #204. C.ICommonLinkerSettings.Libraries are now honoured in Xcode projects. Since Xcode projects require full paths to libraries, library search paths are searched to find each library. If they are not found, SDK library paths are searched. If the library is not found, then an exception is raised.

06-Apr-2016 Issue #204. Added test LinkPrebuiltLibrary, to exercise linking libraries that already exist, and aren't built as part of a Bam build.

06-Apr-2016 Issue #197. CModuleContainer.ExtendWith now identifies any cloned object files with sources that implement Bam.Core.ICloneModule. This is to identify cases where the source file has been procedurally generated, and thus also requires cloning, so that the source generation is also merged into the module ExtendWith was invoked on.

06-Apr-2016 Issue #197. Added a new parameter to Bam.Core.Module.Create, postInitCallback, of type Bam.Core.Module.PostInitDelegate. This is similar to the PreInitDelegate, but invoked after the Module's Init function is called. This is also now an optional parameter to CloneWithPrivatePatches. This is to allow custom configuration of Module data.

06-Apr-2016 Issue #197. Added Bam.Core.ICloneModule, which modules can implement if Bam.Core.Module.CloneWithPrivatePatches is insufficient. For example, if the module has properties that must be assigned in a particular order.

05-Apr-2016 Issue #197. Added new test, EmbedStaticIntoDynamicLibrary, to exercise ExtendSource and ExtendSourcePublicly.

05-Apr-2016 Issue #197. Added ExtendSource and ExtendSourcePublicly functions to ConsoleApplication and DynamicLibrary (both C and C++ flavours), that allow containers of object files to be extended. This allows source to be grouped into a separate container module, and then merged into concrete modules. This is a mechanism analogous to linking a static library into a dynamic library, in a cross-platform environment and without any limitations of the current toolchain. ExtendSource will use any public patches on the standalone container for build only, while ExtendSourcePublicly will additional forward the patch to any callers.

05-Apr-2016 Issue #197. Added Bam.Core.Module.CloneWithPrivatePatches, which clones an existing module (matching its type), but also copies any private patches applied to that module, and its parent container. This is part of merging source containers. No copying of public patches is performed, as this is dependent upon the context.

05-Apr-2016 Issue #197. Bam.Core.Module.ApplySettingsPatches now honours any PrivateInheritedPatches from a parent container module. This can be the case where source containers are merged.

05-Apr-2016 Fixes #203. Updating version numbers in the make_release script no longer swallows stdout messages if an exception occurs.

05-Apr-2016 Fixes #202. Generating API documentation now updates the version number.

05-Apr-2016 ======== Version 1.0.1 Release ========

05-Apr-2016 Doc packages are now titled 'apidocs' to be clear what they contain.

02-Apr-2016 Fixes #190. Addendum: Xcode projects with no build output (e.g. those that just copy headers) cannot be added as a target dependency (i.e. an order dependency) due to limitations of how target dependencies are managed in Xcode projects.

01-Apr-2016 Fixes #122. Another update to Xcode support for copying files, such as for copying headers for a public API, in which the subdirectory is not needed. (This is now consistent with the VSSolution builder code.)

01-Apr-2016 Fixes #200. C.SettingsBase.SharedInterfaces, which is invoked to determine the intersection of settings interfaces for all source files of a library or application in an IDE project build, was ignoring the precedence (Bam.Core.SettingsPrecendenceAttribute), and could lead to interfaces being converted in an incorrect order, resulting in compilation failures. Such an example is for Clang, that has the AllWarnings property, that must be applied before any warning suppression, which is in another interface.

01-Apr-2016 Fixes #190. Xcode target dependencies (order only dependencies) are now deferred until the end of the build, since they require fully defined Targets, which may not be the case for any dependencies on static libraries.

01-Apr-2016 Fixes #199. The C link command in generated MakeFiles now filters prerequisites for object files, since dependent libraries would be specified more than once otherwise.

01-Apr-2016 Updated error message if a module is attempted to be created after a build has started.

01-Apr-2016 Fixes #198. Modules can now specify a custom subdirectory string to apply after the 'moduleoutputdir' macro, by means of the CustomOutputSubDirectory property. By default this is null. C.ObjectFile overrides this as 'obj', C.ConsoleApplication as 'bin', and C.StaticLibrary as 'lib'. This is to avoid any collisions between the mirrored directory tree for object files and a final executable name. For instance, if an application module called FooBar has source files in a folder called FooBar under the package directory, Linux and OSX would previously have had a collision between the directory containing object files, and the executable name. This only happened for platforms where executables do not have an extension. This new property is intended to used by the per-build-mode function ModuleOutputDirectory; and currently in use in Native, MakeFile and VSSolution build modes. It is not used by Xcode, because Xcode projects are more limited in where output files can reside.

01-Apr-2016 Fixes #196. XcodeBuilder exposes Flex and Bison source file types (XcodeBuilder.FileReference.EFileType), and a function to add a source file of a particular type to a target (XcodeBuilder.Target.EnsureFileOfTypeExists). This is in support of the bam-parser repository (https://github.com/markfinal/bam-parser.git).

01-Apr-2016 Fixes #195. Failure to find a specific package now also reports which package requested it.

01-Apr-2016 Fixes #191. Failure to find a requested package repository now reports which package requested it.

01-Apr-2016 Fixes #193. Valid TokenizedStrings containing @, but which were not functions, e.g. OSX install names like @executable_path/../Frameworks threw an exception. This was an attempt to catch mismatching parentheses on a real function call. If a closing parenthesis is missing, an exception will be thrown due to .NET regex balancing groups being used. However, if an opening parenthesis is missing, this is not yet detected.

31-Mar-2016 Fixes #190. For VSSolution and Xcode build modes, C.StaticLibrary projects/targets did not have all necessary order-only dependencies, due to the internals deferring an explicit dependency until a link step using the static library. Inspecting these deferred dependencies in IDE project generation, allows order only dependencies to be added to ensure that all requirements in order to build a static library are enforced. This showed up in IDE projects in the case where a dependent of a static library wrote files necessary for the compilation of the static library. The Native build mode has a finer level of granularity of dependencies, and this issue was not present on that.

31-Mar-2016 Fixes #189. For VSSolution and Xcode build modes, non C.CModule dependencies (i.e. custom tools in the form of projects or targets) on C source containers are now translated to order-only dependencies. This can be useful for utility projects that copy headers for a public API.

31-Mar-2016 Fixes #188. C's LinkAgainst and LinkPubliclyAgainst did not include forwarded libraries on the dependent module, inconsistently with similar functions CompileAndLinkAgainst and CompilePubliclyAndLinkAgainst. The result was potential unresolved symbols during the link.

29-Mar-2016 Fixes #187. C's DynamicLibrary and Cxx.DynamicLibrary module function LinkPubliclyAgainst() did not forward the dependent onto callers of the dynamic libraries. This may be required in some multi-module software systems that have interdependencies.

29-Mar-2016 Fixes #185. Binary builds of BuildAMation are now tagged as 'AnyCPU' to be clear that they are not tied to a specific platform architecture.

29-Mar-2016 Fixes #184. Regression introduced in v1.0.1 beta 5 in VisualC 2015 support for finding C standard library headers, which are in the WindowsSDK 10.

25-Mar-2016 ======== Version 1.0.1b5 Release ========

25-Mar-2016 Fixes #181. POTENTIALLY BREAKING CHANGE. Clarified the use of the 'public' utility functions in the C package. The CompilePubliclyAndLinkAgainst function has moved from C.ConsoleApplication to C.DynamicLibrary and C.Cxx.DynamicLibrary to enforce that 'public' inheritance of patches to dependents are not necessary for executables, but are for dynamic libraries. Added LinkPubliclyAgainst to C.DynamicLibrary and C.Cxx.DynamicLibrary. Added Bam.Core.Module.UsePublicPatchesPrivately, which takes the public patches from a dependent, but only applies them to the build of the current module, rather than forwarding them to any future dependees. Added more documentation to Bam.Core.Module regarding the application of patches. The likely changes to make to existing build scripts is to change CompilePubliclyAndLinkAgainst to CompileAndLinkAgainst in C.ConsoleApplication to C.GuiApplication (particularly for WindowsSDK), or that modules were previously compiling because patches had been leaked through prior to this change.

25-Mar-2016 Fixes #182. When the C# assembly for all the packages in a build fails to compile, an improved error message is now displayed, hinting at using the command line option in bam for enabling debug symbols, and the option to generate a debuggable project in one of the applicable IDEs (VisualStudio/Xamarin Studio/MonoDevelop).

25-Mar-2016 Fixes #180. C.DynamicLibrary and C.Cxx.DynamicLibrary that identify dynamic library dependencies with CompilePubliclyAndLinkAgainst now forward those dependencies on, just like how StaticLibraries already do. If the public API in dynamic library D is exposed in the public API of dynamic library E, then it is legal for a compilation step dependent on D to invoke calls in E that were not resolved during D's link. This change simplifies writing build scripts in that transient dynamic dependencies no longer need to be manually specified.

24-Mar-2016 Fixes #179. Removed the 'frameworks' argument from the C.ILinkingPolicy.Link function, as it is never used. Passing OSX frameworks to the linker is performed via the setting in C.ICommonLinkerSettingsOSX.

24-Mar-2016 Issue #174. Classes deriving C.LinkerTool now requires the overload of the new abstract method, GetLibraryPath, accepting a C.CModule argument.

24-Mar-2016 Fixes #178. Added Bam.Core.ExecuteReasoning.EReason.DeferredEvaluation, and utility function Bam.Core.ExecuteReasoning.DeferredUntilBuild, which can be used to identify modules that must defer their evaluation until after the build starts, e.g. those modules that rely on part of the build to generate their data. It is up to the policy writers of the build mode to handle deferred evaluation.

23-Mar-2016 Fixes #174. Added C.ProceduralHeaderFileFromToolOutput module, requiring a module implementing Bam.Core.ICommandLineTool, whose stdout is captured and used as the contents of the generated header file. Supported in all build modes.

23-Mar-2016 The CommandLineProcessor.Execute overload taking an executable path, now defaults to no command line arguments.

23-Mar-2016 Fixes #175. Bam now throws different exceptions to distinguish between a package with no modules defined, a package used as master but no modules are buildable (i.e. their classes are sealed), and when buildable modules fail to be instantiated.

23-Mar-2016 Fixes #166. Python test harness has a new option, --C.bitdepth, which can be 32 or 64, to limit build tests for those bitdepths. If no option is specified, then 32 and 64-bit builds will be tested, where supported.

23-Mar-2016 Fixes #148. Circular module references now result in an exception being thrown.

23-Mar-2016 Fixes #113. Speculative fix to synchronization issue with a multithreaded Xcode build seen just once.

23-Mar-2016 Fixes #103. Adding a dependent package using bam and the command line option, --adddependent, now validates that the package both exists (in the current list of package repositories in the definition file), and that there is no ambiguity over which version of a package was intended.

23-Mar-2016 Fixes #176. Added C.ICxxOnlyCompilerSettings.EnableRunTimeTypeInfo, defaulting to true, enabling RTTI during compilation. Supported by VisualC, Mingw, Gcc, Clang, in all build modes.

18-Mar-2016 ======== Version 1.0.1b4 Release ========

12-Mar-2016 Fixes #170. The CachedPackageAssembly directory written to the build root, containing the compiled assembly for the last build, is now hidden.

09-Mar-2016 Fixes #167. The attribute Bam.Core.EvaluationRequiredAttribute can now be applied to individual modules. Previously, it was only applicable to classes implementing Bam.Core.IBuildModeMetaData, i.e. defining the evaluation behaviour for the entire build mode. For project generation build modes, modules that perform tasks outside of the project, e.g. procedural file generation, should be always evaluated, so that they are not regenerated unnecessarily when the project is rebuilt (and not cleaned). C.ProceduralHeaderFile now uses the attribute to do just this, which reduces rebuild times after projects are regenerated.

03-Mar-2016 Fixes #169. Added Boolean setting property, EnableLanguageExtensions, to VisualCCommon.ICommonCompilerSettings. Defaults to true, since Windows.h does not compile without it, even with WIN32_LEAN_AND_MEAN defined.

03-Mar-2016 Issue #164. Mingw, Clang, and Gcc compiler properties, AllWarnings, ExtraWarnings, Pedantic, and StrictAliasing, command line conversion will now add the appropriate command when the properties are set to False.

03-Mar-2016 Issue #164. C.ICommonCompilerSettings.WarningsAsError command line conversion will now add the appropriate command when this property is set to False.

03-Mar-2016 Fixes #146. Making a new package writes the initial .cs file in bam/Scripts with \n EOLs on all platforms, to be consistent with other files written by Bam.

03-Mar-2016 Fixes #163. Added StrictAliasing property to MingwCommon.ICommonCompilerSettings. Defaults to true in optimized builds, false in debug. This is consistent with the same property defined for Clang and Gcc.

29-Feb-2016 Issue #162. Added VisualC-11.0 and VisualC-10.0 as non-default dependents to the test packages.

29-Feb-2016 Issue #162. Added limited support for VisualStudio 2010. Testing has only been performed on the Express edition, which 1) only has a 32-bit compiler (64-bit support is separate download), 2) does not contain redistributable runtime DLLs, 3) does not support solution folders. The professional edition may not have some of these limitations.

29-Feb-2016 Fixes #165. The improvement to multiple package resolution in issue #138 could lead to a situation where all references to a dependent package are removed from consideration. Such a case occurs when package A is not referenced by the master package, but only by different versions of a dependent package B. Suppose one version of B does not reference A, but that version is chosen for use. All references of package A are removed because the unused versions of package B are removed, leaving no reference to package A. The error report in this case was not useful, so this has been improved.

29-Feb-2016 Issue #162. VisualC.MetaData now exposes a Bam.Core.TokenizedStringArray property called RequiredExecutablePaths, that are added to the PATH environment variable to run all of the VisualStudio command line tools. In particular, this addresses VisualStudio 2012 storing mspdb*.dll in Common7/IDE while later versions store it in VC/bin.

29-Feb-2016 Issue #162. All versions of VisualC packages will now throw an exception if the installation directory for VisualStudio does not exist.

29-Feb-2016 Issue #164. Simplified compiler interface Intersect and Delta extension methods, by adding extension methods to each datatype used as properties in those interfaces, to performan intersection and complement operation on the data. This has not changed behaviour - just simplified the code for future improvements.

29-Feb-2016 Issue #162. Added VisualStudio 2012 support.

28-Feb-2016 Fixes #161. Added Boolean property, DoNotDereferenceTarget, to the Publisher.IMakeLinkSettings interface, defaulting to true. When used with symbolic links to directories repeatedly, this stops circular links from being created, as the existing symlink is not followed. In this context, it does require the Force property to be set to true (it is by default). On OSX, the circular link was created on the second build run where frameworks were published, causing a subsequent clean build to fail.

28-Feb-2016 Bam.Core.TokenizedStringArray and C.PreprocessorDefinitions now include Intersect and Complement functions, which simplify compiler settings code.

28-Feb-2016 Simplified settings code for compilers with the updated Bam.Core.StringArray.Intersect and Complement functions.

28-Feb-2016 Fixes #160. Removed obsolete Bam.Core.ISetOperations interface. This was used pre-v1.0.0 and pre-LINQ support. Only referenced in Bam.Core.StringArray, and now replaced with an improved version that works better with the Bam.Core.Array base class.

25-Feb-2016 Fixes #158. C.ProceduralHeaderFile does not write a header inclusion guard if the override to GuardString returns null.

24-Feb-2016 Fixes #157. Xcode custom shell scripts now fail the build if any commands run return a non-zero exit code. This uses 'set -e', which bash will exit immediately if any command executed fails.

24-Feb-2016 Fixes #156. Publisher.Collation exposes a read-only property, InitialReference, which is set to the first collated file, that is used as a reference point for all future objects to be collated. This information is useful to IDE project generation.

24-Feb-2016 Fixes #155. Scanning for #includes in C source files now implicitly searches the same directory as the source file for any headers. Since the compiler does not need that path explicitly added to the header search paths in order to find sibling headers, it is a valid path to scan for them.

24-Feb-2016 Fixes #154. Scanning for #includes in C source files no longer assumes a single space after #include. Zero or more whitespace characters are now accepted.

24-Feb-2016 Added some documentation for macros added to Core assembly objects.

24-Feb-2016 Issue #153. If a module is created with a parent (i.e. it's a child of a collection), then that module now has access to two new TokenizedString macros: parentmodulename, encapsulatedparentmodulename. The former is the 'modulename' macro of the parent. The latter is the 'modulename' macro of the parent's encapsulating module. These can be identical, if the parent is a referenced module. These macros are useful for path generation for procedurally generated source, in order to generate a unique path.

23-Feb-2016 Issue #122. Modifications to XcodeBuilder to generate a 'utility' project for cases of collating a prebuilt file. Xcode projects don't have an analogous target type to VisualStudio's utility, so a static library with no source files is used.

23-Feb-2016 Fixes #147. C.ObjectFiles that are not compiled are now still browsable in Xcode projects.

23-Feb-2016 Fixes #152. The linker in Mingw-4.8.1 now implements the C.ICommonLinkerSettingsWin interface, covering the subsystem and .def file.

23-Feb-2016 Fixes #151. Added ExportDefinitionFile property (type: Bam.Core.TokenizedString) to C.ICommonLinkerSettingsWin, defaulting to null. This is for the .def file. If this is set to a valid path, it is passed to the linker and the contents used as the list of exported symbols for the binary. If the value remains null, the linker will generate a .def file based on metadata on symbols in the code.

23-Feb-2016 Fixes #150. Needed to invoke Parse() on the Bam.Core.TokenizedStrings for RPath and RPathLink.

22-Feb-2016 Fixes #147. Added PerformCompilation boolean property to C.ObjectFile (and thus all derived types of object files). Default value is true. This is to allow the compilation of a source file to be disabled, and yet still appear in project files for browsing. Possible uses for this is for marking source files that are #included into other source files. This change adds VisualStudio support.

22-Feb-2016 Allow changing the header search path from C.ProceduralHeaderFile, by overriding the IncludeDirectory property.

17-Feb-2016 Fixes #145. Modules using the C package that have the [C.Prebuilt] attribute now contribute any headers into a non-buildable project in VisualStudio. This is useful for browsing the headers and intellisense-like features of the IDE. The interface Bam.Core/Interfaces/IBuildModeMetaData.cs has been extended with a read-only Boolean property CanCreatePrebuiltProjectForAssociatedFiles, which each build mode must implement, indicating whether there is support for such prebuilt un-buildable projects.

17-Feb-2016 Fixes #144. The TokenizedString post-function @relativeto(path,baseDir) will now return path if there is no common root found, rather than throw an exception.

16-Feb-2016 ======== Version 1.0.1b3 Release ========

16-Feb-2016 Fixes #138. Recursively resolving package version ambiguity has been improved. If a package A has two versions in a package definition file, and each version of A depends on a different version of package B (and these are the only references to B), then prior to this fix, resolving which version of A is used (e.g. on the command line, --A.version=..., or specify the default in the master package definition file), would not automatically resolve B, even though there is no ambiguity anymore. A concrete example of this issue occurred with the VisualC packages, which depend on different versions of the WindowsSDK packages; specifying --VisualC.version=X still required --WindowsSDK.version=Y prior to the fix.

16-Feb-2016 Fixes #143. VisualC-14.0 added to the test package definition files. VisualC-12.0 remains as the default.

16-Feb-2016 Fixes #142. All C/C++ source files in tests now use C style comments, since files may be compiled on a variety of different tools and different build settings, which may not support C++ style comments.

16-Feb-2016 Fixes #141. Before cleaning the build root (command line option -c|--clean), all files within it are stripped of the read-only attribute, to avoid an error occurring. Read-only files may have been introduced from a previous build using a collation module that preserved file attributes.

16-Feb-2016 Fixes #140. To support VisualStudio 2015 changes to the distributed CRT libraries, VisualCCommon.IRuntimeLibraryPathMeta has been altered, requiring code changes to any usage of it. The function MSVCR returning a Bam.Core.TokenizedString is now called CRuntimePaths and returns a Bam.Core.TokenizedStringArray. This is to accomodate VisualStudio 2015 now returning the VisualC runtime library (vcruntime140.dll) and the universal crt from the WindowsSDK 10 (ucrtbase.dll). To future proof any changes to the C++ runtime libraries, MSVCP returning a Bam.Core.TokenizedString is now called CxxRuntimePaths and returns a Bam.Core.TokenizedStringArray. The recommended usage of these functions is a foreach loop, and collate each path returned. See the Test5 or InstallerTest1 examples for an illustration.

15-Feb-2016 InstallerTest1 updated to build two sets of installers, one with C only dependencies, and one with C++ dependencies. This is mostly to exercise the publishing of CRT DLLs with an installer.

12-Feb-2016 Fixes #137. ToolsVersion attribute written into .vcxproj and .vcxproj.filters is now part of the VisualC metadata. VisualC-12.0 has .vcxproj ToolsVersion 12.0, while VisualC-14.0 has 14.0. Both have filters ToolVersion of 4.0.

12-Feb-2016 Fixes #136. Added WindowsSDK-10. Note that this also references files from the 8.1 SDK version as well. VisualC-14.0 depends on WindowsSDK-10.

12-Feb-2016 Fixes #135. Each VisualC-N package specifies its WindowsSDK as there is general coherence between versions. VisualC-12.0 specifies WindowsSDK-8.1. Only specify a WindowsSDK version in a master package if you wish to override this default.

11-Feb-2016 Fixes #123. Common directory names used in different contexts in paths used in Bam.Core.ModuleGroup are no longer identified as the same solution folder in VisualStudio.

11-Feb-2016 Fixes #134. Added Bam.Core.OSUtilities.WindowsProgramFilesPath and WindowsProgramFilesx86Path properties, which return the locations of the 'Program Files' and 'Program Files (x86)' (on 64-bit Windows, otherwise 'Program Files'). Updated VisualC-*, Installer, WindowsSDK packages to use the new API. Tools should now be successfully located on both 64-bit and 32-bit editions of Windows.

09-Feb-2016 Fixes #133. Clarified the terms of use of LimitedConcurrencyLevelTaskScheduler from https://msdn.microsoft.com/en-us/library/ee789351.aspx under the Microsoft Limited Public License (MS-PL.md). This code is used in the Core assembly, to control the number of threads in a build with the -j=N switch. This license is mentioned in the Bam command line output. The MS-PL license text is also distributed with BuildAMation. See Microsoft Developer Services Agreement (https://msdn.microsoft.com/en-us/cc300389.aspx), section 2b (Software on Documentation Portals) for details.

09-Feb-2016 Fixes #101. For all C module collections with compilable output, a new base class CCompilableModuleContainer is now used. This new class derives from the previous base class, CModuleContainer. This is due to the AddFile method in CModuleContainer not being compatible with a HeaderFileCollection, and so the class hierarchy has been split between compilable and non-compilable collections. An explicit C.HeaderFile module can now be added to a HeaderFileCollection using the AddFile method.

09-Feb-2016 Fixes #91. C container functions that accept multiple source modules (e.g. CompileAgainst, CompilePubliclyAgainst), have had their signatures slightly altered to ensure that at least one source module is passed. Additional source modules can be passed, but are now optional. This moves a runtime test to a compile time test.

09-Feb-2016 Fixes #92. Package XML definition files that do not satisfy the schema syntax now identifies the error by description and location on the terminal.

09-Feb-2016 Fixes #93. Feedback is now provided on the terminal when a package is successfully made.

08-Feb-2016 ======== Version 1.0.1b2 Release ========

08-Feb-2016 Fixes #132. Parsing C source files for header includes no longer tries to match whitespace between the quotes or angle brackets. Without that, any trailing inline comments containing quotes or angle brackets would be included in the regex match. (Assume header files containing spaces are the exception, rather than the rule.)

08-Feb-2016 Fixes #128. Added C.ProceduralHeaderFile abstract module class, which can be derived from to generate header files for a build. Properties that can be overridden are OutputFile (the header path), Contents (the contents of the header - the guard is automatically written), and GuardText (an optional override to the header inclusion guard, otherwise the basename of the header). The header is always generated as part of the bam build - it is not converted to IDE projects. Added test ProceduralHeaderTest1.

08-Feb-2016 Fixes #131. Parsing C source files for header includes now accepts both quotes and angle bracket syntax. Previously, only quoted paths were searched, since the assumption was that angle brackets were for system headers, and thus invariant.

08-Feb-2016 Fixes #130. BuildAMation already supports modules that implement the Bam.Core.IModuleGroup containing 'children' which are modules implementing the Bam.Core.IChildModule interface. This allowed dependencies to flow from parent to child. However, if a module implementing IChildModule, but with a different parent, was added as a dependency, it was ignored as a proper dependency (treated as just a child), resulting in an incorrect dependency graph. Parentage is now evaluated for all modules implementing IChildModule. The relevant case for this is when a procedurally generated header was added as a dependency on a source collection.

07-Feb-2016 Fixes #129. C.ELanguageStandard now exposes GNU89 and GNU99 standards. Default language standard remains at C89. The extensions are necessary to support some language extensions required by some projects.

06-Feb-2016 Fixes #127. Response files on Windows now escape back slashes.

06-Feb-2016 Fixes #126. Mingw tools now use response files for very long command lines.

06-Feb-2016 Fixes #125. Using the bam command line options to modify the definition file now honours the version set on existing referenced Bam assemblies in the definition file. Previously, the patch version on any referenced assembly was removed upon writing the updated file. New definition files (i.e. when making a new package) honour the full version of BuildAMation in use.

05-Feb-2016 Fixes #124. Any C container implementing AddFiles() can already accept a wildcarded path, e.g. /path/to/*.c to find all .c files in /path/to. In addition, it can accept a recursive search, /path/to/**.c, which finds all .c files recursively beneath /path/to.

05-Feb-2016 Clarified when C.CModuleContainer.AddFiles fails to find any files from the original System.IO.Directory.GetFiles call, or if the regex filter has been applied.

05-Feb-2016 Fixes #123. Bam.Core.ModuleGroup attributes can now specify a path (using forward slashes). VisualStudio solutions honour the directories as a hierarchy of solution folders.

05-Feb-2016 Issue #122. Modifications to VSSolutionBuilder to generate a utility project for cases of collating a prebuilt file. Note that there is no Xcode support for this at this time.

05-Feb-2016 Fixes #122. Allow arbitrary files to start off the Publisher collation, rather than just outputs from modules. Use Publisher.Collation.IncludeFile(path,subdirectory). This allows the Publisher.Collation module to be used for other tasks, such as copying sparsely distributed header files into a single location, to act as a public API. Added example, PublishingTest2, to exercise this.

28-Jan-2016 Fixes #118. Added Installer.IDiskImageSettings.ImageSize string setting. Defaults to '32m'. The string should be sensible for the -size parameter to hdiutil.

28-Jan-2016 TokenizedString post-functions taking multiple arguments now throw an exception if an incorrect number of arguments are passed.

28-Jan-2016 Fixes #117. TokenizedString post-function, @ifnotempty, added in beta1, has been modified so that the expression is @ifnotempty(pred,a,b). If the expression predicate does not evaluate to an empty string, then the whole expression is replaced with a, otherwise b. In addition, Publisher.CollatedDirectory macros have been normalized so that even renamed directories are clonable by a StrippedBinaryCollation.

27-Jan-2016 Fixes #115. Trying to set the Windows character set in a patch for a subset of a module's source files is not supported in the VSSolution build mode. This is because the setting is project wide. An exception is now thrown if this is encountered. The workaround is to apply the patch to all the source files.

19-Jan-2016 Missing toolchain packages and incorrectly spelt toolchain overrides now report how to fix the problem.

13-Jan-2016 ======== Version 1.0.1b1 Release ========

13-Jan-2016 Fixes #111. DiskImage conversion sometimes fails, as the directory containing the converted .dmg was not created.

13-Jan-2016 Fixes #110. MakeFiles with commands including parentheses that are not Make commands require the parentheses to be escaped for bash.

13-Jan-2016 Fixes #55. Fixing MakeFile generation for GNU objcopy and strip.

12-Jan-2016 Fixes #109. Dynamic library builds no longer performs symlink generation for prebuilts.

12-Jan-2016 Fixes #106. TokenizedString post-function, removetrailingseperator, is misspelt. This function is now deprecated, and will be removed in v1.1.0. Replaced with the correctly spelt, removetrailingseparator.

12-Jan-2016 Fixes #105. Added documentation for the pre- and post-functions available in TokenizedStrings.

12-Jan-2016 Fixes #104. Very wide Native builds were not displaying the output and error streams from external processes launched.

09-Jan-2016 Fixes #94. Overriding the macros 'pluginprefix' and 'pluginext' are now honoured in Xcode and VisualStudio projects. Updated the PluginTest test case to exercise changing these macros.

08-Jan-2016 Fixes #102. Preprocessor defines with quotes specified from the build scripts are now supported consistently across platforms and IDEs in BuildAMation. Added a test case, PreprocessorStringTest1, to exercise these forms. To specify a quoted string as a preprocessor definition within a (private or public) patch, use (settings as ICommonCompilerSettings).PreprocessorDefines.Add("DEFNAME", "\"astring\""); or the TokenizedString function (settings as ICommonCompilerSettings).PreprocessorDefines.Add("DEFNAME", this.CreateTokenizedString("@escapedquotes(apath)"));

06-Jan-2016 Fixes #100. Added CopiedFilename write property to Publisher.CollatedDirectory. If set, the directory is renamed during the copy. Also, Linux/OSX copy functionality has changed from 'cp' to 'bash -c cp' in order for wildcards to be evaluated.

06-Jan-2016 Added TokenizedString post-function, @ifnotempty(a,b). If 'a' is not an empty string, then use it, otherwise use b.

06-Jan-2016 Fixes #99. Xcode pre and post build scripts now escape double quotes.

06-Jan-2016 Added boolean property Bam.Core.TokenizedString.IsAliased, returning true when the TokenizedString is aliased to another.

06-Jan-2016 Fixes #98. Bam.Core.ICommandLineTool has been extended with a read-only property of type TokenizedStringArray, called TerminatingArguments. This pairs with the existing property InitialArguments, which adds arguments directly after the executed. This new property adds arguments after all other arguments. It can be used, for example, to invoke shell commands through bash requiring wildcard expansion, e.g. 'bash -c "cp * dest"', where the quotes around the copy command are required. This new property provides support to add the terminating quotes. Note: due to the change to the interface, any class implementing it will need to include a definition of this property. Note that if a class derives from Bam.Core.PreBuiltTool instead, no changes are necessary, as this class implements the property to return no arguments.

06-Jan-2016 Fixes #97. TokenizedString expressions referencing functions (pre or post) but having mismatched brackets, could result in the .NET regex engine hanging indefinitely. Added a timeout (5 seconds) and throw an exception with details on both the source expression and regex used, in order to diagnose the issue.

06-Jan-2016 Fixes #96. The utility function Bam.Core.Module.MakePlaceholderPath could only be used once per module, due to the caching of similar TokenizedStrings. Undesired behaviour resulted if it was used multiple times, since as soon as any placeholder TokenizedString on that Module was aliased (the whole purpose behind a placeholder), all placeholder strings were aliased. Added a utility function Bam.Core.TokenizedString.CreateUncached, which will always return a unique TokenizedString. Bam.Core.Module.MakePlaceholderPath now uses TokenizedString.CreateUncached.

06-Jan-2016 Added new test, PublishingTest1, which can be used to exercise the features of the Publisher package.

04-Jan-2016 Fixes #95. All Publisher public methods (Include* and ChangeRPath) now return the modules they create, to allow such modules to be ordered through dependencies. Note that IncludeFramework returns an Array<CollatedObject> since it can copy directories, files and symbolic links.

28-Dec-2015 ======== Version 1.0.0 Release ========

14-Dec-2015 Renamed the entry point of package repositories test code, from ConfigureRepository to configure_repository.

09-Dec-2015 Fixes #88. Fixed issue where running 'bam --help --clean' in a package directory would result in an exception when the build root is cleaned.

09-Dec-2015 Fixes #89. Static libraries or header libraries that compile against header libraries now set up module requirements in the graph, so projects actually display those headers. This does not affect the build, as the patches were working previously.

01-Dec-2015 Check first whether a VSProject option already contains a value, before raising an exception if it isn't possible to append.

30-Nov-2015 ======== Version 1.0.0b4 Release ========

30-Nov-2015 Fixes #58. Documented Core assembly, and some of the major packages.

26-Nov-2015 Fixes #85. Added check for mismatching brackets on a TokenizedString function call (pre and post types), e.g. @dir($(0) would previously result in an infinite loop, but will now fail.

26-Nov-2015 Fixes #79. Windows installers default to non-privileged locations (%APPDATA%) for their installation paths.

26-Nov-2015 Fixes #38. VisualStudio and Xcode project files display module source files in a folder hierarchy that mirrors their location beneath their respective package directories.

25-Nov-2015 Fixed #83. Modules with source files with the same basename, but different directories, now compile their object files to unique locations, duplicating the directory structure under their package directory for the full path to their object files. VisualStudio projects use the new object file locations, Xcode builds always built to unique object file locations. MakeFiles share the same directory structure as Native build modes.

24-Nov-2015 Added new TokenizedString post-function, @trimstart(a,b), that removes (multiple) instances of b from the start of a.

24-Nov-2015 Fixes #84. Added Bam.Core.ICommandLineTool.UseResponseFileOption, a string property. This is the option to use on the command line if the tool supports response files in Native build mode. This option is only invoked if the command line length exceeds 32767 characters. Any class implementing this interface will require updating. Bam.Core.PrebuiltTool implements this as a virtual property, with a default of null (response files not supported). VisualC compiler, linker and archiver supports it with the "@" command.

23-Nov-2015 Added new TokenizedString post-function, @escapedquotes(a), which surrounds the argument with \\\". This is useful to use a string as a preprocessor definition.

23-Nov-2015 Issue #83. Default C.ObjectFile path has changed from using the basename of the source file, to the relative path of the source file to the package directory. This means that object file paths now incorporates the folder hierarchy of the source, allowing source files with duplicate basenames to exist in a package. For example, in the DuplicateSourceFilenameTest test.

23-Nov-2015 Added new TokenizedString post-function, @relativeto(a,b), which calculates the relative path of 'a' to 'b'. If the result is 'a', then an exception is thrown, as returning absolute paths may not be ideal if the function is used to compose a path.

23-Nov-2015 Bam.Core.PlatformFilterAttribute and ConfigurationFilterAttribute no longer expose the EPlatform and EConfiguration as properties. Instead an 'Includes' boolean function that accepts an EPlatform or EConfiguration, returning true if the argument is contained within the flags set on the attribute, false otherwise.

23-Nov-2015 Extended the CommandLineProcessor.Processor utility class, so that arbitrary executables can be invoked, without needing to go through the Bam.Core.ITool interface. For example, if a module simply needed to invoke a system command.

23-Nov-2015 Changed the type of Bam.Core.ICommandLineTool.InheritedEnvironmentVariables from System.Collections.Generic.List<string> to Bam.Core.StringArray. Any module implementing this interface will require an update.

23-Nov-2015 Added test, DuplicateSourceFilenameTest, to exercise compiling source files, with the same basename, but different paths in a module.

23-Nov-2015 Fixes #82. Report a useful exception message of why trying to add a dependency (eventually through Bam.Core.FindReferencedModule) will not work in a patch. Instead, this should be done during the invocation of the module's Init function.

21-Nov-2015 ======== Version 1.0.0b3 Release ========

20-Nov-2015 Catch and report exceptions thrown during Settings creation.

20-Nov-2015 Added GccCommon.ICommonCompilerSettings.StrictAliasing and ClangCommon.ICommonCompilerSettings.StrictAliasing, defaulting to false in debug, and true in all configurations with optimizations enabled. See http://dbp-consulting.com/tutorials/StrictAliasing.html for an explanation of aliasing.

20-Nov-2015 Added Publisher.IObjCopyToolSettings.Verbose boolean option to vary the amount of output from the objcopy tool. Defaults to true.

20-Nov-2015 Fixes #75. Mingw binutils 2.25.1 changed behaviour of objcopy, requiring at least the SYSTEMROOT environment variable, or a failure to create a temporary file is reported.

20-Nov-2015 Fixes #74. Only Windows console applications will define the _CONSOLE preprocessor definition.

20-Nov-2015 Fixes #72. C preprocessor definitions that have a value containing a quoted string did not parse correctly in MakeFiles in a bash shell. These values appeared to just require a double quote surrounding them, which also works in Native build modes.

20-Nov-2015 Fixes #76. Added synchronization to VSSolution functions to avoid collections changing in multiple threads concurrently.

19-Nov-2015 Fixes #71. Xcode build settings with multiple values are now serialized as a comma separated list scoped by parentheses. Any escaped characters are enforced in the serialized project files.

19-Nov-2015 Fixes #73. Bam.Core.Settings.Interfaces() now returns all implemented settings interfaces from the Settings instance, ordered by precedence (Bam.Core.SettingsPrecedenceAttribute). This ensures all build modes convert interfaces in a consistent order.

18-Nov-2015 Fixes #70. Added --immediateoutput (-i) command line option the Bam Core. Usually, output is deferred for the Bam.Core.Executor to display (so it is not interleaved during multithreaded builds), but if the process were to stall, then no output would be seen. Using this option displays the output (both stdout and stderr) immediately, useful for diagnosing issues. Default remains deferred output.

18-Nov-2015 Fixes #69. Installer package now exposes a verbosity setting on the DiskImage module, to configure how much output is logged from hdiutil. The options are Default, Quiet, Verbose, Debug, corresponding to the flags (<empty>, '-quiet', '-verbose', '-debug'). Default is the default setting.

18-Nov-2015 Fixes #68. Poll every few seconds for process exit in CommandLineProcessor. Some processes, although ended in the OS, did not return from process.WaitForExit.

18-Nov-2015 Fixes #67. Added C.ICommonLinkerSettings.Bits, which is configured automatically, but allows linkers that must pass options specifying the architecture to do so.

18-Nov-2015 Fixes #64. Added test, MultiBitDepthModuleTest, that illustrates how to build a module in both 32-bit and 64-bit.

18-Nov-2015 Fixes #66. Multiple configuration Xcode builds, with modules that are configuration specific, relating to an application bundle to be created, was throwing an exception, as the metadata to identify an application bundle was being set, and then unset, by the modules on different configurations executed at different times (since the application bundle is treated as a single entity in multiple configurations in the Xcode project).

17-Nov-2015 Fixes #65. Added synchronization to XcodeBuilder, to avoid multiple build threads changing lists simultaneously.

16-Nov-2015 Fixes #60. Collation of OSX Frameworks now optionally changes the install name of the dylib, to be in a standard location for an application bundle, from an optional argument to Publisher.Collation.IncludeFramework. The default value of this argument is false, so this is a change of behaviour to earlier versions of the Publisher package. If frameworks are built with install names, that, say, use an rpath, then their install name does not need changing - instead, a suitable RPath search path should be added to the main executable.

16-Nov-2015 Added ClangCommon.ICommonLinkerSettings.RPath property to all Clang-Xcode* linker settings, to add RPaths to the linked binary. Defaults to being an empty list.

16-Nov-2015 Fixes #59. Changed release process to build the solution with 'xbuild' (equivalent to msbuild) on Mono implementations.

16-Nov-2015 Moved all command line option classes into an 'Options' sub-namespace, to scope them, and simplify what is visible using Intellisense.

16-Nov-2015 Fixes #63. Added command line option, '--viewgraph', to display a representation of the dependency graph of modules on the console.

13-Nov-2015 Fixes #62. Invoking 'bam --showdefinition' on a package outside of a formal repository (i.e. not in a packages or tests folder), threw an exception.

13-Nov-2015 Fixes #61. C/C++ compiler warning levels must appear on the command lines before any warning suppressions. The interfaces containing the warning levels now have a high precedence.

11-Nov-2015 ======== Version 1.0.0b1 (and b2) Release ========

10-Nov-2015 Fixes #30. Added tar settings for compression. Supporting gzip, bzip and lzma.

10-Nov-2014 Added post-function @removetrailingseparator() to TokenizedString, to trim any trailing slashes from paths.

10-Nov-2015 Fixes #4. Added support for Windows resources to be compiled for linking into binaries. Use CreateWinResourceContainer(<path>), similar to normal source files. Support available in Native, MakeFile and VSSolution build modes.

09-Nov-2015 Fixes #17. Fixes #31. Installers now write to configuration specific directories, using names based on their modules. Also, allowed more than one of each type to be created, which was limiting because of their use of another module to generate scripts.

09-Nov-2015 The macro 'OutputName' is now available on all modules. It defaults to the module's name.

09-Nov-2015 Preliminary support for VisualStudio 2015 (Community Edition); see package VisualC-14.0.

09-Nov-2015 Removed Bam.Core.EConfiguration.Final. Existing configurations are debug (full debugging), optimized (no symbols, full optimizations), profile (debug symbols, full optimizations - useful for generating installers while hiving off debug symbols).

09-Nov-2015 Renamed Publisher.Collation.PublishingRoot PathKey to Publisher.Collation.Key (for consistency with other modules).

09-Nov-2015 Added new test, InstallerTest1, to exercise generating installers for all platforms.

09-Nov-2015 Renamed Bam.Core.FileKey to Bam.Core.PathKey, as it is being used for more than just files now.

09-Nov-2015 Updated Bam schema, so that BamAssemblies can use a major, minor, patch attribute, to specify the minimum version supported.

07-Nov-2015 Fixes #52. Nullable fields in Convert functions of settings interfaces are now tested consistently (with .HasValue & .Value properties). Only C compiler interfaces use nullable types, as only these need to calculate common and delta settings.

07-Nov-2015 Fixes #51. Removed legacy Mono package assembly compilation flags.

06-Nov-2015 Fixes #48. Removed Bam.Core.Module argument from CommandLineProcessor.IConvertToCommandLine.Convert, as its use is not always required, and if needed, can be found from the Bam.Core.Settings object on which this interface is applied.

06-Nov-2015 Fixes #49. Added Bam.Core.ConfigurationFilterAttribute, applied to module classes, to indicate whether a module should be built in the current configurations.

06-Nov-2015 Fixes #50. Moved deleting the build root (if the command line specifies it) before package compilation, so that the cached assembly remains on disk after the build. This was stopping the assembly being reused.

06-Nov-2015 Renamed C.ExternalFramework to C.OSXFramework.

06-Nov-2015 Internal expressions referring to the CModule macro 'PatchVersion' (used in semantic versioning with MajorVersion and MinorVersion), now use the pre-function #valid. This is so that thirdparty builds that only support major.minor version numbers can still use Bam modules, by deleting the PatchVersion macro from their modules.

06-Nov-2015 Added pre-function, #valid, which checks whether its expression is valid, i.e. is it a valid expression with valid macro references in the current context. If it is valid, the function call is replaced by its expression. If it is not valid, the function call is removed.

06-Nov-2015 Added 'pre-function' support to Bam.Core.TokenizedStrings, identified by the syntax #<func>(<expression>). The existing function support is for post-evaluation-functions, identified by @<func>(<expression>), i.e. only executed once all tokens have been evaluated. Pre-functions are run prior to token evaluation.

06-Nov-2015 Removed optional flags from Bam.Core.TokenizedString.Create. The deferred expansion flag has been removed. In its place is the concept of an 'inline' TokenizedString, created by invoking Bam.Core.TokenizedString.CreateInline. These inline strings are never parsed themselves, but instead are embedded into strings referring to them during parsing. If Module M1 defines a TokenizedString A that refers by name to an inline TokenizedString B in module M2, then B is allowed to refer, by name, to macros in module M1, as long as M1 and M2 are 'aware' of each other. The best case use of this is where M1 is a C module, and M2 is the Tool associated with M1.

05-Nov-2015 Fixes #39. Publisher package now has a new module StrippedBinaryCollation, only supported in the Native build mode. This works with a Collation module, and a DebugSymbolCollation module, as source, and mirrors the directory structure of the former. On Linux, strip is invoked on each binary, and subsequently objcopy links the stripped binary to the debug symbols generated earlier. On Windows, for binaries with PDBs, a clone of the binary is taken, while without PDBs, strip and objcopy is used. On OSX, strip is invoked on each binary. All non-built files/directories/symlinks are cloned as-is.

05-Nov-2015 Ignore any prebuilt modules from debug symbol collation.

05-Nov-2015 Added C.PrebuiltAttribute, so that modules can be marked up as being already built. This is an attribute on a class, so place it on a module definition. This is useful for detecting cases where modules may not have available data, e.g. debug symbols.

05-Nov-2015 Renamed Bam.Core.Module.ModulePreInitDelegate to Bam.Core.Module.PreInitDelegate, and also made it a generic based on the type of module being created. Any lambda expression used for this delegate now accepts an argument of the real type of the new module, rather than the base class Bam.Core.Module. This avoids any need to cast.

04-Nov-2015 Bam.Core.Settings now has a Module property, set in InitializeAllInterfaces, to the module the Settings instance is associated with. This can be useful to access module paths during get/set property calls in settings interfaces.

04-Nov-2015 VisualC sets the PDB path when debug symbols for the linker are enabled, and records the PDB file as a generated path on the module.

04-Nov-2015 Added TokenizedString function, @changeextension(a, b), which will change the file extension of file 'a', with the extension in 'b'.

04-Nov-2015 Publisher package now has a new module DebugSymbolCollation, only supported in the Native build mode. This accepts a Collation module as source, and mirrors its directory structure. On Linux, objcopy is invoked to copy debugsymbols from the original binary. On OSX, dsymutil is invoked to create a dSYM bundle. On Windows, PDB files are copied if generated (intended for VisualStudio), otherwise objcopy is used (intended for Mingw).

04-Nov-2015 Added macro 'encapsulatingmodulename' to all Modules, once completed.

03-Nov-2015 Added package Clang-Xcode7, targeting SDK 10.11. (Note that Xcode 7 does not include SDK 10.10.)

03-Nov-2015 Renamed Clang-Apple600 package to Clang-Xcode6, targeting SDKs 10.9 and 10.10.

03-Nov-2015 Renamed Clang-Apple503 package to Clang-Xcode5, targeting SDKs 10.8 and 10.9.

03-Nov-2015 Renamed Clang-Apple425 package to Clang-Xcode4, targeting SDKs 10.7 and 10.8.

03-Nov-2015 Fixes #43. The Clang package metadata now exposes a MinimumVersionSupported property, to define the oldest version of MacOSX the build can run on. This defaults to the SDK version if not overridden by the user in a class deriving Bam.Core.IPackageMetaDataConfigure<Clang.MetaData>. This value is used both for compilation and linking. Although these are exposed in compiler and linker settings, this is purely for ease of conversion to command lines.

03-Nov-2015 Added generic function Bam.Core.Graph.PackageMetaData<meta type>(package name) to fetch the meta data instance for the named package, if it exists. This simplifies calling code, and avoids the need for use Linq in that code.

03-Nov-2015 Fixes #44. Clang packages now have metadata with an SDK property (type: string), which is the SDK name to use. The default SDK is used (from 'xcrun --show-sdk-version') if not overridden by the user, using a class deriving Bam.Core.IPackageMetaDataConfigure<Clang.MetaData>. This SDK name is passed to each xcrun command, which is used in turn by each command xcrun executes.

03-Nov-2015 OSX tools from the Xcode developer installation, e.g. clang, install_name_tool, otool, ar, ld, etc, are now executed through the use of 'xcrun'. Currently, the SDK and toolchain used, are as those set by xcode-select. This change allows for future options for using different SDKs and toolchains.

03-Nov-2015 Added property InitialArguments (type: Bam.Core.TokenizedStringArray) to Bam.Core.ICommandLineTool, which is tightly coupled with the Executable property. There are instanced of some tools that are a proxy to others, e.g. on Windows, the cmd executable can take a child executable name to run. When these tools are run, the command line is '<toolname> [<initial args>] <args from settings>'.

03-Nov-2015 Bam.Core.IPackageMetaData is now an abstract class called Bam.Core.PackageMetaData. This is because it now has a protected constructor, which looks for any class derived from Bam.Core.IPackageMetaDataConfigure<package meta data type>, and invokes the Configure method on it. This is to allow user packages to hook into package metadata construction, before the default implementation.

02-Nov-2015 Fixes #37. C builds expose PatchVersion (defaults to zero) in addition to MajorVersion and MinorVersion, so that package builds support semantic versioning. Note on Linux, a symbolic link of <lib>.so.<major>.<minor> is not created, as it does not serve a purpose at either link time or for the dynamic loader.

02-Nov-2015 BuildAMation now uses semantic versioning (semver.org) for its version numbers.

30-Oct-2015 Implemented Evaluate method on Publisher.CollatedSymbolicLink module to only make symbolic links when necessary. This will only execute when the symbolic link does not exist.

30-Oct-2015 Implemented Evaluate method on Publisher.CollatedFile module to only copy files when necessary.

30-Oct-2015 Added GccCommon, ClangCommon and MingwCommon ICommonCompilerSettings property: Visibility. These follow the EVisibility enumeration for the respective module, and default to EVisibility.Hidden. This means that only symbols with __attribute__((visibility("default"))) markup in shared objects will be exported. This is equivalent to the __declspec(dllexport) markup for VisualStudio.

30-Oct-2015 Added GccCommon, ClangCommon and MingwCommon ICommonCompilerSettings properties: AllWarnings, ExtraWarnings and Pedantic. These are boolean properties and default to false.

30-Oct-2015 Added Children property override to C.CModuleContainer, honouring the module type stored within the container. This eliminates the need for useful casts while using the enumeration.

30-Oct-2015 Fixes #41. The checks for whether an object file is up-to-date (evaluation) needed to also check whether the source file will be updated in this build, not just whether the timestamps already vary. This resolves object files not rebuilding when source files are procedurally generated.

30-Oct-2015 Adding an explicit module into a C container, now requires that module to be a C.SourceFile or derived from that. This is beneficial when the source is procedurally generated, as it simplifies the steps required. Also cleaned up the mechanism for creating C.SourceFiles when adding to a container by path.

22-Oct-2015 Fixes #32. Linking in MakeFiles now uses the linker's ProcessLibraryDependency utility function, which in turn will use any required linker switches to handle the different kinds of dependency. For example, -Wl,-rpath-link is used for shared objects that depend on shared objects.

21-Oct-2015 Fixes #35. Added support for Xcode sub-projects, that are needed for order only Target dependencies.

21-Oct-2015 Fixes #36. Renamed 'SharedSettings' extension method on compiler interfaces to 'Intersect'. This now takes the 'common' settings object and one more to intersect with. This means that the common settings are always being involved in the intersection, so that it is now cumulative.

20-Oct-2015 Fixes #34. Updated Xcode project generation so that adding pre build steps for Xcode Targets that have yet to be processed themselves much simpler, but also more rigorous. Follows the design for VisualStudio projects.

18-Oct-2015 Fixes #33. C.ICOnlyCompilerSettings.LanguageStandard now has a default set of c89. Previously this command line switch never appeared on supporting toolchain compilation lines.

17-Oct-2015 Added VisualCCommon.ICommonCompilerSettings.WarningLevel setting. Defaults to Level1 as per the Microsoft documentation.

16-Oct-2015 ======== Version 1.0a5 Release ========

15-Oct-2015 Bam.Core.IBuildModeMetaData now requires implementing the property PublishBesideExecutable. This is because some build modes (i.e. those with IDE projects), should publish binary and data dependencies next to the debuggable executable. Whereas other build modes can publish to a standalone directory.

15-Oct-2015 TokenizedStrings can be aliased to other TokenizedStrings, see the Aliased function(). This enables TokenizedStrings to be referenced externally from point of creation (e.g. as a module generated path), and switched later to another TokenizedString.

15-Oct-2015 Renamed C.ILinkerSettingsWin to C.ICommonLinkerSettingsWin for consistency.

15-Oct-2015 Renamed C.ILinkerSettingsOSX to C.ICommonLinkerSettingsOSX for consistency.

15-Oct-2015 Changed C.ILinkerSettingsOSX.Frameworks from Bam.Core.Array<Bam.Core.TokenizedString> to Bam.Core.TokenizedStringArray.

15-Oct-2015 Changed C.ILinkerSettingsOSX.FrameworkSearchDirectories from Bam.Core.Array<Bam.Core.TokenizedString> to Bam.Core.TokenizedStringArray, and renamed to FrameworkSearchPaths.

15-Oct-2015 Changed C.ICommonCompilerSettingsOSX.FrameworkSearchDirectories from Bam.Core.Array<Bam.Core.TokenizedString> to Bam.Core.TokenizedStringArray, and renamed to FrameworkSearchPaths.

15-Oct-2015 Changed C.ICommonCompilerSettings.IncludePaths from Bam.Core.Array<Bam.Core.TokenizedString> to Bam.Core.TokenizedStringArray.

15-Oct-2015 Changed C.ICommonCompilerSettings.SystemIncludePaths from Bam.Core.Array<Bam.Core.TokenizedString> to Bam.Core.TokenizedStringArray.

15-Oct-2015 Changed C.ICommonLinkerSettings.LibraryPaths from Bam.Core.Array<Bam.Core.TokenizedString> to Bam.Core.TokenizedStringArray.

15-Oct-2015 Changed GccCommon.ICommonLinkerSettings.RPath from Bam.Core.StringArray to Bam.Core.TokenizedStringArray.

15-Oct-2015 Added TokenizedStringArray Add and AddUnique functions that take string arguments - these are converted to verbatim TokenizedStrings.

14-Oct-2015 Debuggable project files are now <modulename>-bam.csproj, to distinguish between those generated for the VSSolution build mode.

14-Oct-2015 Added Publisher.Collation.ChangeRPath utility function, that will alter the RPath for a copied (ELF) file to that path specified. This is so that published files, e.g. plugins, can locate shared objects wherever they may get published to.

14-Oct-2015 Each package representing a build mode (e.g. NativeBuilder) has a class for metadata (named <buildmode>Meta). This must now implement a new interface, Bam.Core.IBuildModeMetaData, which requires a function to return the module output directory TokenizedString used for each module. This allows different build modes to write to different locations under the build root, should their use require it. Most have a module output directory of 'encapsulating module name'/'configuration'.

13-Oct-2015 Added Bam.Core.MacroList.Remove(), with an argument with no token markup. Use this function cautiously, as it can cause TokenizedStrings to fail to parse.

13-Oct-2015 Bam.Core.MacroList.Contains now expects the argument to have no token markup (i.e. no $( prefix and no ) suffix). Note that this is because the macros are internally stored in a format for fast lookups for TokenizedStrings.

13-Oct-2015 Fixes #3. Added macros to C.CModule, MajorVersion (defaults to "1") and MinorVersion (defaults to "0"), but can be overridden in Module's Init functions. Some platforms support writing this data natively into the generated binaries, or including into the filenames.

13-Oct-2015 Bam.Core.TokenizedString.Create now accepts an optional flags parameter. One of these flags is EFlags.DeferredExpansion, which allows macro expansion to be deferred for one level. For example, if a Tool uses a Macro, which is defined in the Module using the tool, this now expands properly.

10-Oct-2015 Added short version of option --createdebugproject, -p.

10-Oct-2015 Renamed FileKey from Publisher.Collation.PackageRoot to Publisher.Collation.PublishingRoot.

09-Oct-2015 Fixes #1. Added function to publish OSX frameworks, IncludeFramework. This requires that the module to be published derives from C.ExternalFramework, and implements the properties indicating which files, directories and symbolic links need to be published from that framework.

09-Oct-2015 Fixes #28. Added support for publishing symbolic links.

08-Oct-2015 Added Bam.Core.MacroList.AddVerbatim.

08-Oct-2015 Fixes #26. Added command line option, --stats, which displays memory, object count, and timing information at the end of a build.

07-Oct-2015 Removed verbatim optional argument to Bam.Core.TokenizedString.Create. Use CreateVerbatim instead.

07-Oct-2015 Added Bam.Core.TokenizedString.CreateVerbatim utility function, for strings that require no parsing.

07-Oct-2015 Fixes #25. Nested function calls in TokenizedStrings are now supported.

07-Oct-2015 Bam.Core.TokenizedString now understands the @normalize(<path>) function, returning the full normalized path of the argument.

06-Oct-2015 Fixes #24. Added function to publish whole directories, IncludeDirectory() on the Collation object.

06-Oct-2015 Fixes #23. Fixed the regular expression tokenizing a string for functions, when multiple functions are present.

06-Oct-2015 Bam.Core.TokenizedString.Create will return null if the format string passed in is null. To create an empty tokenized string, use string.Empty, or Bam.Core.Module.MakePlaceholderPath.

06-Oct-2015 Bam.Core.TokenizedString now understands the @dir(<path>) function, returning the parent directory of the argument.

06-Oct-2015 C.ObjectFile no longer defines an inputpath macro, for interaction with the corresponding source file. Instead, the source file's TokenizedString path is referenced directly, via positional tokens.

06-Oct-2015 Bam.Core.Module now has a utility function to create TokenizedStrings that reference macros in that module, CreateTokenizedString. Also, a new function, MakePlaceholderPath(), which is a TokenizedString on the module intended for replacement at a later time (e.g. create a module empty, then set the source path). This is so that other modules can reference this placeholder before the path is set.

06-Oct-2015 Fixes #22. TokenizedString creation now accepts an optional list of TokenizedStrings. This is to allow references to strings other than those in macro lists, e.g. source/output paths of modules. These are referred to as positional tokens, and may be referenced by a zero-based numeric index as a token (usual token notation), e.g. "$(0)" refers to the first string in that list.

03-Oct-2015 Fixes #21. Each file published is now a separate module, which enables both parallelism and that tools can be assigned to each published object.

03-Oct-2015 Running command line tools no longer leaves the standard input stream open. This avoids tools that request user input from indefinitely pausing the build - instead they will fail because there will never be any input.

03-Oct-2015 Fixes #20. Exceptions thrown during a threaded build are now displayed with full details and stack trace to the user.

03-Oct-2015 Fixes #19. Bam executed with -d/--debug did not use debug symbols in Mono.

02-Oct-2015 Added VisualCCommon.IRuntimeLibraryPathMeta interface, implemented by VisualC.MetaData class, to return the paths for the C and C++ runtime libraries for the version of VisualC. 32 or 64-bit versions are requested by the argument to the interface functions, MSVCR (C runtime) and MSVCP (C++ runtime).

02-Oct-2015 Fixes #18. Added Publisher.Collation.IncludeFile function(s), so that files not associated with modules can be published.

02-Oct-2015 Added Bam.Core.TokenizedString.ParseAndQuoteIfNecessary. If the parsed string contains a space, the returned string from this function is wrapped in (double) quotes. Otherwise, the parsed string is returned.

02-Oct-2015 Fixes #15. Environment variables can now be used in TokenizedStrings. For example, a tokenized string can be "$(HOME)" to get the HOME environment variable.

02-Oct-2015 Fixes #16. VisualC builds in Native build mode no longer default to statically linking the CRT, which was different to VSSolution build modes (dynamically linking the CRT). The default is now to dynamically link (to reduce binary size) against the non-debug CRT. This can be changed on the VisualCCommon.ICommonCompilerSettings.RuntimeLibrary property.

25-Sep-2015 ======== Version 1.0a4 Release ========

25-Sep-2015 Fixes #12. To compiler, archiver and linker settings, added a new interface C.IAdditionalSettings, which allows a back door to setting arbitrary tool options, in the event of an existing interface not exposing the necessary property. This simply avoids having to modify packages to add a command line switch. VisualStudio and Xcode support provided. But note that Xcode does not expose any visible custom archiver setting.

25-Sep-2015 Fixes #11. C.ConsoleApplication and C.GuiApplication and C.DynamicLibrary allowed the creation of C++ source containers through class methods. These methods have been moved to the equivalent C.Cxx module types.

24-Sep-2015 Fixes #10. Do not assume that gcc, g++, ar, and ld, all reside on the same path. For instance, Gcc-4.8 on CentOS 6 is installed to /opt/rh/devtoolset-2, while ar and ld reside in /usr/bin.

23-Sep-2015 Fixes #9. Each conversion package (CommandLineProcessor, VisualStudioProcessor, XcodeProjectProcessor) now uses Bam.Core.Settings.Interfaces(), and reflection, to invoke each settings interface on a Settings object. Fetching the interfaces through reflection does not guarantee an order, so the precedence of interfaces are queried through Bam.Core.SettingsPrecedenceAttribute. C.ICommonArchiverSettings has a very negative precedence, as some librarians (ar) require the output file to be specified as the last argument before all input files.

23-Sep-2015 Issue #9. Added Bam.Core.SettingsPrecedenceAttribute, applicable to interfaces, that takes an integer value to define an order of evaluation. This is in respect of Settings interfaces (implement Bam.Core.ISettingsBase). By default, precedence is zero. A more negative value indicates that the interface is processed later, while a more positive value indicates that the interface is processed earlier.

23-Sep-2015 Issue #9. Added Bam.Core.Settings.Interfaces() that returns an IEnumerable returning the interfaces on the Settings object.

21-Sep-2015 ======== Version 1.0a3 Release ========

21-Sep-2015 Fixes #8. PATH is now searched for gcc, and versions checked, rather than assuming installation directories, and naming conventions.

21-Sep-2015 Check whether a C source directory exists before enumerating it for files.

21-Sep-2015 Fixes #6. Wrapped Module creation in a try catch, which will throw a new exception type, Bam.Core.ModuleCreationException, capturing the module type in the inner most module creation call, so that accurate module information can be provided when reporting the error.

21-Sep-2015 First check whether a package repository exists before enumerating it for packages.

21-Sep-2015 Fixes #7. Unhandled exceptions fell through the bam executable. Now catch and report them, for a cleaner exit.

19-Sep-2015 Fixes #2. The Bam test harness can now specify other package repositories to test, as well as the default in Bam. There is a requirement of a bamtests.py in the tests folder of each repository, naming each valid Test, and the build modes in which it can be run.

18-Sep-2015 bam --version now reports the directory containing the Bam core assembly.

18-Sep-2015 Dependent package definition files did not add their package repositories into the search paths, in order to resolve all packages they reference.

18-Sep-2015 ======== Version 1.0a2 Release ========

18-Sep-2015 C.ConsoleApplication.RequiredToExist<T> now accepts a comma separated list of modules to apply public patches of T to. This is used, for instance, for plugins that do not need to be linked against an application, but do expose a header to compile against.

18-Sep-2015 Public patches on a module are now inherited by all modules that reside within it. For example, a C static library has a public patch to provide an include path; all source containers within that static library automatically use that patch.

17-Sep-2015 ======== Version 1.0a1 Release ========

16-Sep-2015 Next target version set to 1.0.
